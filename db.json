{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[],"Cache":[{"_id":"source/_posts/apache-committer.md","hash":"683234d08c57f8a53be63810ed13c30d0506194c","modified":1521301164313},{"_id":"source/_posts/workflow.md","hash":"e9f0052d0fb0a0f8453494a8cf15cb79ed326f98","modified":1521294764189},{"_id":"public/2018/03/17/apache-committer/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521301661531},{"_id":"public/2018/03/17/workflow/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521301661531},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521301661532},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521301661532},{"_id":"public/archives/2018/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521301661532},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521301661532}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"[TOC]\n\n## 前言：\n   中国互联网公司这十几年的蓬勃发展，涌现了BAT、华为等一批公司开源项目的领军者，不少个人开发者也不断闪耀在开源领域。\n   我最近有幸参与了一个Apache项目的孵化初始化过程，从一个committer的视角将一些注册的流程记录一下。\n\n## 一、项目提交apache孵化器\n###  书写孵化项目提案\n   在孵化项目提案中，会有初始化提交者列表这一选项。确认你是初始化提交者的一员。项目在apache孵化器社区投票通过后，提交者可以开始准备注册账户了。\n## 二、个人开发者提交ICLA\n\n###1、选apache id\n   在[apache提交者列表页](http://people.apache.org/committer-index.html)查看可用的apache id，\n###2、个人提交者授权协议（ICLA）：\n   下载[ICLA模板](https://www.apache.org/licenses/icla.pdf)，查找可用的id。将icla.pdf个人信息填写正确后发送邮件给秘书 secretary@apache.org,秘书会帮忙创建apache 用户id。同时会创建一个your id@apache.org的邮箱，可以在[apache提交者列表页](http://people.apache.org/committer-index.html)查看查找用户是否已经创建。\n\n## 三、加入apache开发者组\n   1、登入[Apache账户工具](https://id.apache.org/)，首次登入可以选忘记密码获得初始化密码，会发送到forward邮箱\n   2、修改编辑页面的homepage url，[apache提交者列表页](http://people.apache.org/committer-index.html)中你的账户能加主页链接。\n   3、修改编辑页面的github账户，会发有邮件邀请你加入github.com/apache组。\n## 四、获得提交者对项目的写权限\n\n[GitBox账户链接工具](https://gitbox.apache.org/setup/)的填写\n\n###1、Apache账户授权\n   按照提示授权Apache账户OAuth登入\n###2、Github账户授权\n   按照提示授权Github账户OAuth登入\n###3、在github.com设置github账户两因素授权（2FA）\n   按照[授权GitHub 2FA wiki](https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/)操作如下：\n1、在手机安装 “google身份验证器” app\n2、按照[授权GitHub 2FA wiki](https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/)一步一步操作。\n\n   在[两因素授权验证(2. Scan this barcode with your app.)](https://github.com/settings/two_factor_authentication/verify)界面，不选择建议用手机扫描二维码，因为有些手机会扫描不出来。\n   请打开手机 “google身份验证器” app，点“+”选择“输入提供的秘钥”： “账户名”填入github账户，“您的秘钥”填打开网页中“enter this text code” 链接里面的文本。手机app点”添加“后将为此账户生成的6位数字动态。将此6位数字填入网页中的文本框，然后点“Enable”。这样2fa就设置成功了。\n\n3、退出并重新登入Github，输入用户名、密码后会多一步。动态密码的填写，用app的动态密码\n4、需要约半个小时,会有邮件通知加入xx project-committers开发者组。或者自己去[apache teams](https://github.com/orgs/apache/teams) 查看。\n  \n\n## 四、The apache way\n   社区重于代码\n   如果没有在社区(邮件列表)谈过，就当没有发生过","source":"_posts/apache-committer.md","raw":"[TOC]\n\n## 前言：\n   中国互联网公司这十几年的蓬勃发展，涌现了BAT、华为等一批公司开源项目的领军者，不少个人开发者也不断闪耀在开源领域。\n   我最近有幸参与了一个Apache项目的孵化初始化过程，从一个committer的视角将一些注册的流程记录一下。\n\n## 一、项目提交apache孵化器\n###  书写孵化项目提案\n   在孵化项目提案中，会有初始化提交者列表这一选项。确认你是初始化提交者的一员。项目在apache孵化器社区投票通过后，提交者可以开始准备注册账户了。\n## 二、个人开发者提交ICLA\n\n###1、选apache id\n   在[apache提交者列表页](http://people.apache.org/committer-index.html)查看可用的apache id，\n###2、个人提交者授权协议（ICLA）：\n   下载[ICLA模板](https://www.apache.org/licenses/icla.pdf)，查找可用的id。将icla.pdf个人信息填写正确后发送邮件给秘书 secretary@apache.org,秘书会帮忙创建apache 用户id。同时会创建一个your id@apache.org的邮箱，可以在[apache提交者列表页](http://people.apache.org/committer-index.html)查看查找用户是否已经创建。\n\n## 三、加入apache开发者组\n   1、登入[Apache账户工具](https://id.apache.org/)，首次登入可以选忘记密码获得初始化密码，会发送到forward邮箱\n   2、修改编辑页面的homepage url，[apache提交者列表页](http://people.apache.org/committer-index.html)中你的账户能加主页链接。\n   3、修改编辑页面的github账户，会发有邮件邀请你加入github.com/apache组。\n## 四、获得提交者对项目的写权限\n\n[GitBox账户链接工具](https://gitbox.apache.org/setup/)的填写\n\n###1、Apache账户授权\n   按照提示授权Apache账户OAuth登入\n###2、Github账户授权\n   按照提示授权Github账户OAuth登入\n###3、在github.com设置github账户两因素授权（2FA）\n   按照[授权GitHub 2FA wiki](https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/)操作如下：\n1、在手机安装 “google身份验证器” app\n2、按照[授权GitHub 2FA wiki](https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/)一步一步操作。\n\n   在[两因素授权验证(2. Scan this barcode with your app.)](https://github.com/settings/two_factor_authentication/verify)界面，不选择建议用手机扫描二维码，因为有些手机会扫描不出来。\n   请打开手机 “google身份验证器” app，点“+”选择“输入提供的秘钥”： “账户名”填入github账户，“您的秘钥”填打开网页中“enter this text code” 链接里面的文本。手机app点”添加“后将为此账户生成的6位数字动态。将此6位数字填入网页中的文本框，然后点“Enable”。这样2fa就设置成功了。\n\n3、退出并重新登入Github，输入用户名、密码后会多一步。动态密码的填写，用app的动态密码\n4、需要约半个小时,会有邮件通知加入xx project-committers开发者组。或者自己去[apache teams](https://github.com/orgs/apache/teams) 查看。\n  \n\n## 四、The apache way\n   社区重于代码\n   如果没有在社区(邮件列表)谈过，就当没有发生过","slug":"apache-committer","published":1,"date":"2018-03-17T15:39:24.313Z","updated":"2018-03-17T15:39:24.313Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjevjqakb0000ofjfwfei7qtp","content":"<p>[TOC]</p>\n<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>   中国互联网公司这十几年的蓬勃发展，涌现了BAT、华为等一批公司开源项目的领军者，不少个人开发者也不断闪耀在开源领域。<br>   我最近有幸参与了一个Apache项目的孵化初始化过程，从一个committer的视角将一些注册的流程记录一下。</p>\n<h2 id=\"一、项目提交apache孵化器\"><a href=\"#一、项目提交apache孵化器\" class=\"headerlink\" title=\"一、项目提交apache孵化器\"></a>一、项目提交apache孵化器</h2><h3 id=\"书写孵化项目提案\"><a href=\"#书写孵化项目提案\" class=\"headerlink\" title=\"书写孵化项目提案\"></a>书写孵化项目提案</h3><p>   在孵化项目提案中，会有初始化提交者列表这一选项。确认你是初始化提交者的一员。项目在apache孵化器社区投票通过后，提交者可以开始准备注册账户了。</p>\n<h2 id=\"二、个人开发者提交ICLA\"><a href=\"#二、个人开发者提交ICLA\" class=\"headerlink\" title=\"二、个人开发者提交ICLA\"></a>二、个人开发者提交ICLA</h2><p>###1、选apache id<br>   在<a href=\"http://people.apache.org/committer-index.html\" target=\"_blank\" rel=\"noopener\">apache提交者列表页</a>查看可用的apache id，</p>\n<p>###2、个人提交者授权协议（ICLA）：<br>   下载<a href=\"https://www.apache.org/licenses/icla.pdf\" target=\"_blank\" rel=\"noopener\">ICLA模板</a>，查找可用的id。将icla.pdf个人信息填写正确后发送邮件给秘书 <a href=\"mailto:secretary@apache.org\" target=\"_blank\" rel=\"noopener\">secretary@apache.org</a>,秘书会帮忙创建apache 用户id。同时会创建一个your <a href=\"mailto:id@apache.org\" target=\"_blank\" rel=\"noopener\">id@apache.org</a>的邮箱，可以在<a href=\"http://people.apache.org/committer-index.html\" target=\"_blank\" rel=\"noopener\">apache提交者列表页</a>查看查找用户是否已经创建。</p>\n<h2 id=\"三、加入apache开发者组\"><a href=\"#三、加入apache开发者组\" class=\"headerlink\" title=\"三、加入apache开发者组\"></a>三、加入apache开发者组</h2><p>   1、登入<a href=\"https://id.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache账户工具</a>，首次登入可以选忘记密码获得初始化密码，会发送到forward邮箱<br>   2、修改编辑页面的homepage url，<a href=\"http://people.apache.org/committer-index.html\" target=\"_blank\" rel=\"noopener\">apache提交者列表页</a>中你的账户能加主页链接。<br>   3、修改编辑页面的github账户，会发有邮件邀请你加入github.com/apache组。</p>\n<h2 id=\"四、获得提交者对项目的写权限\"><a href=\"#四、获得提交者对项目的写权限\" class=\"headerlink\" title=\"四、获得提交者对项目的写权限\"></a>四、获得提交者对项目的写权限</h2><p><a href=\"https://gitbox.apache.org/setup/\" target=\"_blank\" rel=\"noopener\">GitBox账户链接工具</a>的填写</p>\n<p>###1、Apache账户授权<br>   按照提示授权Apache账户OAuth登入</p>\n<p>###2、Github账户授权<br>   按照提示授权Github账户OAuth登入</p>\n<p>###3、在github.com设置github账户两因素授权（2FA）<br>   按照<a href=\"https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/\" target=\"_blank\" rel=\"noopener\">授权GitHub 2FA wiki</a>操作如下：<br>1、在手机安装 “google身份验证器” app<br>2、按照<a href=\"https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/\" target=\"_blank\" rel=\"noopener\">授权GitHub 2FA wiki</a>一步一步操作。</p>\n<p>   在<a href=\"https://github.com/settings/two_factor_authentication/verify\" target=\"_blank\" rel=\"noopener\">两因素授权验证(2. Scan this barcode with your app.)</a>界面，不选择建议用手机扫描二维码，因为有些手机会扫描不出来。<br>   请打开手机 “google身份验证器” app，点“+”选择“输入提供的秘钥”： “账户名”填入github账户，“您的秘钥”填打开网页中“enter this text code” 链接里面的文本。手机app点”添加“后将为此账户生成的6位数字动态。将此6位数字填入网页中的文本框，然后点“Enable”。这样2fa就设置成功了。</p>\n<p>3、退出并重新登入Github，输入用户名、密码后会多一步。动态密码的填写，用app的动态密码<br>4、需要约半个小时,会有邮件通知加入xx project-committers开发者组。或者自己去<a href=\"https://github.com/orgs/apache/teams\" target=\"_blank\" rel=\"noopener\">apache teams</a> 查看。</p>\n<h2 id=\"四、The-apache-way\"><a href=\"#四、The-apache-way\" class=\"headerlink\" title=\"四、The apache way\"></a>四、The apache way</h2><p>   社区重于代码<br>   如果没有在社区(邮件列表)谈过，就当没有发生过</p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>   中国互联网公司这十几年的蓬勃发展，涌现了BAT、华为等一批公司开源项目的领军者，不少个人开发者也不断闪耀在开源领域。<br>   我最近有幸参与了一个Apache项目的孵化初始化过程，从一个committer的视角将一些注册的流程记录一下。</p>\n<h2 id=\"一、项目提交apache孵化器\"><a href=\"#一、项目提交apache孵化器\" class=\"headerlink\" title=\"一、项目提交apache孵化器\"></a>一、项目提交apache孵化器</h2><h3 id=\"书写孵化项目提案\"><a href=\"#书写孵化项目提案\" class=\"headerlink\" title=\"书写孵化项目提案\"></a>书写孵化项目提案</h3><p>   在孵化项目提案中，会有初始化提交者列表这一选项。确认你是初始化提交者的一员。项目在apache孵化器社区投票通过后，提交者可以开始准备注册账户了。</p>\n<h2 id=\"二、个人开发者提交ICLA\"><a href=\"#二、个人开发者提交ICLA\" class=\"headerlink\" title=\"二、个人开发者提交ICLA\"></a>二、个人开发者提交ICLA</h2><p>###1、选apache id<br>   在<a href=\"http://people.apache.org/committer-index.html\" target=\"_blank\" rel=\"noopener\">apache提交者列表页</a>查看可用的apache id，</p>\n<p>###2、个人提交者授权协议（ICLA）：<br>   下载<a href=\"https://www.apache.org/licenses/icla.pdf\" target=\"_blank\" rel=\"noopener\">ICLA模板</a>，查找可用的id。将icla.pdf个人信息填写正确后发送邮件给秘书 <a href=\"mailto:secretary@apache.org\" target=\"_blank\" rel=\"noopener\">secretary@apache.org</a>,秘书会帮忙创建apache 用户id。同时会创建一个your <a href=\"mailto:id@apache.org\" target=\"_blank\" rel=\"noopener\">id@apache.org</a>的邮箱，可以在<a href=\"http://people.apache.org/committer-index.html\" target=\"_blank\" rel=\"noopener\">apache提交者列表页</a>查看查找用户是否已经创建。</p>\n<h2 id=\"三、加入apache开发者组\"><a href=\"#三、加入apache开发者组\" class=\"headerlink\" title=\"三、加入apache开发者组\"></a>三、加入apache开发者组</h2><p>   1、登入<a href=\"https://id.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache账户工具</a>，首次登入可以选忘记密码获得初始化密码，会发送到forward邮箱<br>   2、修改编辑页面的homepage url，<a href=\"http://people.apache.org/committer-index.html\" target=\"_blank\" rel=\"noopener\">apache提交者列表页</a>中你的账户能加主页链接。<br>   3、修改编辑页面的github账户，会发有邮件邀请你加入github.com/apache组。</p>\n<h2 id=\"四、获得提交者对项目的写权限\"><a href=\"#四、获得提交者对项目的写权限\" class=\"headerlink\" title=\"四、获得提交者对项目的写权限\"></a>四、获得提交者对项目的写权限</h2><p><a href=\"https://gitbox.apache.org/setup/\" target=\"_blank\" rel=\"noopener\">GitBox账户链接工具</a>的填写</p>\n<p>###1、Apache账户授权<br>   按照提示授权Apache账户OAuth登入</p>\n<p>###2、Github账户授权<br>   按照提示授权Github账户OAuth登入</p>\n<p>###3、在github.com设置github账户两因素授权（2FA）<br>   按照<a href=\"https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/\" target=\"_blank\" rel=\"noopener\">授权GitHub 2FA wiki</a>操作如下：<br>1、在手机安装 “google身份验证器” app<br>2、按照<a href=\"https://help.github.com/articles/configuring-two-factor-authentication-via-a-totp-mobile-app/\" target=\"_blank\" rel=\"noopener\">授权GitHub 2FA wiki</a>一步一步操作。</p>\n<p>   在<a href=\"https://github.com/settings/two_factor_authentication/verify\" target=\"_blank\" rel=\"noopener\">两因素授权验证(2. Scan this barcode with your app.)</a>界面，不选择建议用手机扫描二维码，因为有些手机会扫描不出来。<br>   请打开手机 “google身份验证器” app，点“+”选择“输入提供的秘钥”： “账户名”填入github账户，“您的秘钥”填打开网页中“enter this text code” 链接里面的文本。手机app点”添加“后将为此账户生成的6位数字动态。将此6位数字填入网页中的文本框，然后点“Enable”。这样2fa就设置成功了。</p>\n<p>3、退出并重新登入Github，输入用户名、密码后会多一步。动态密码的填写，用app的动态密码<br>4、需要约半个小时,会有邮件通知加入xx project-committers开发者组。或者自己去<a href=\"https://github.com/orgs/apache/teams\" target=\"_blank\" rel=\"noopener\">apache teams</a> 查看。</p>\n<h2 id=\"四、The-apache-way\"><a href=\"#四、The-apache-way\" class=\"headerlink\" title=\"四、The apache way\"></a>四、The apache way</h2><p>   社区重于代码<br>   如果没有在社区(邮件列表)谈过，就当没有发生过</p>\n"},{"title":"浅谈工作流引擎","_content":"[TOC]\n## 一、工作流相关概念\n  * 工作流(Workflow)\n      *   是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则，在计算机中以恰当的模型表达并对其实施计算。工作流要解决的主要问题是：为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。（维基百科[工作流技术](https://zh.wikipedia.org/wiki/工作流技术) ）\n\n  * BPMN(Business Process Model and Notation)\n    *    BPMN 是目前被各 BPM 厂商广泛接受的 BPM 标准，全称为 Business Process Model and Notation，由 OMG 组织进行维护，2011 年 1 月份发布了其 2.0 的正式版。BPMN 2.0 对比于第一个版本，其最重要的变化在于其定义了流程的元模型和执行语义，即它自己解决了存储、交换和执行的问题。这代表着 BPMN 2.0 流程定义模型不仅仅可以在任何兼容 BPMN 2.0 的引擎中执行，而且也可以在图形编辑器间交换。作为一个标准，BPMN 2.0 统一了工作流社区。\n  * 有穷状态机\n  \t工作流流程定义图要求：必须是有一个起点和一个终点的有向图\n  \t\n  * XPDL（XML Process Definition Language）WFMC \n  WFMC工作流定义语言，流程模型文档规范。\n  (![流程示例](http://img.blog.csdn.net/20151228065630522))\n  \n## 二、工作流的特点？\n\n### 工作流参考模型\n<br/>(![流程架构](http://img.blog.csdn.net/20151228065316082))\n\n## 三、jBPM技术体系\n\n     * jbpm VS activiti\n     地址：\n     http://www.activiti.org/download.html  activiti\n\n     * jBPM是目前市场上主流开源工作引擎之一，在创建者Tom Baeyens离开JBoss后，jBPM的下一个版本jBPM5完全放弃了jBPM4的基础代码，基于Drools Flow重头来过，目前官网已经推出了jBPM6的beta版本；Tom Baeyens加入Alfresco后很快推出了新的基于jBPM4的开源工作流系统Activiti。\n\n     * 都是BPMN2过程建模和执行环境。\n     * 都是BPM系统（符合BPM规范）。\n     * 都是开源项目-遵循ASL协议（ Apache的 软件许可）。\n     * 都源自JBoss（Activiti5是jBPM4的衍生，jBPM5则基于Drools Flow）。\n     * 都很成熟，从无到有，双方开始约始于2年半前。\n     * 都有对人工任务的生命周期管理。 Activiti5和jBPM5唯一的区别是jBPM5基于WebService - HumanTask标准来描述人工任务和管理生命周期。 如有兴趣了解这方面的标准及其优点，可参阅WS - HT规范介绍  。\n     * 都使用了不同风格的 Oryx 流程编辑器对BPMN2建模。 jBPM5采用的是 Intalio 维护的开源项目分支。 Activiti5则使用了Signavio维护的分支。\n\n\n优劣对比：\n\n从技术组成来看，Activiti最大的优势是采用了PVM（流程虚拟机），支持除了BPMN2.0规范之外的流程格式，与外部服务有良好的集成能力，延续了jBPM3、jBPM4良好的社区支持，服务接口清晰，链式API更为优雅；劣势是持久化层没有遵循JPA规范。\n\njBPM最大的优势是采用了Apache Mina异步通信技术，采用JPA/JTA持久化方面的标准，以功能齐全的Guvnor作为流程仓库，有RedHat(jBoss.org被红帽收购)的专业化支持；但其劣势也很明显，对自身技术依赖过紧且目前仅支持BPMN2。\n\n## 三、activiti\n       *  咖啡兔博客： http://www.kafeitu.me/\n       *  activiti demo  http://demo.kafeitu.me:8080/kft-activiti-demo/login/\n\n## 四、jBPM的几个元素\n        * 流程设计器\n        * 自定义表单\n        * 流程自动化与数据统计\n   \n\n###  一些思考\n  *  引擎的两个极端：一飞冲天的动力之源？  为解决拥堵而变成新拥堵的制造者？\n   \n    | 飞机引擎        |         | \n   | --------   | -----       | ----       |\n   |  ![飞机引擎](http://img.blog.csdn.net/20151228065159929) | \n    | 西直门立交桥        |         |\n   | ![这里写图片描述](http://img.blog.csdn.net/20151228065548780)  |  \n\n","source":"_posts/workflow.md","raw":"---\ntitle: 浅谈工作流引擎\n---\n[TOC]\n## 一、工作流相关概念\n  * 工作流(Workflow)\n      *   是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则，在计算机中以恰当的模型表达并对其实施计算。工作流要解决的主要问题是：为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。（维基百科[工作流技术](https://zh.wikipedia.org/wiki/工作流技术) ）\n\n  * BPMN(Business Process Model and Notation)\n    *    BPMN 是目前被各 BPM 厂商广泛接受的 BPM 标准，全称为 Business Process Model and Notation，由 OMG 组织进行维护，2011 年 1 月份发布了其 2.0 的正式版。BPMN 2.0 对比于第一个版本，其最重要的变化在于其定义了流程的元模型和执行语义，即它自己解决了存储、交换和执行的问题。这代表着 BPMN 2.0 流程定义模型不仅仅可以在任何兼容 BPMN 2.0 的引擎中执行，而且也可以在图形编辑器间交换。作为一个标准，BPMN 2.0 统一了工作流社区。\n  * 有穷状态机\n  \t工作流流程定义图要求：必须是有一个起点和一个终点的有向图\n  \t\n  * XPDL（XML Process Definition Language）WFMC \n  WFMC工作流定义语言，流程模型文档规范。\n  (![流程示例](http://img.blog.csdn.net/20151228065630522))\n  \n## 二、工作流的特点？\n\n### 工作流参考模型\n<br/>(![流程架构](http://img.blog.csdn.net/20151228065316082))\n\n## 三、jBPM技术体系\n\n     * jbpm VS activiti\n     地址：\n     http://www.activiti.org/download.html  activiti\n\n     * jBPM是目前市场上主流开源工作引擎之一，在创建者Tom Baeyens离开JBoss后，jBPM的下一个版本jBPM5完全放弃了jBPM4的基础代码，基于Drools Flow重头来过，目前官网已经推出了jBPM6的beta版本；Tom Baeyens加入Alfresco后很快推出了新的基于jBPM4的开源工作流系统Activiti。\n\n     * 都是BPMN2过程建模和执行环境。\n     * 都是BPM系统（符合BPM规范）。\n     * 都是开源项目-遵循ASL协议（ Apache的 软件许可）。\n     * 都源自JBoss（Activiti5是jBPM4的衍生，jBPM5则基于Drools Flow）。\n     * 都很成熟，从无到有，双方开始约始于2年半前。\n     * 都有对人工任务的生命周期管理。 Activiti5和jBPM5唯一的区别是jBPM5基于WebService - HumanTask标准来描述人工任务和管理生命周期。 如有兴趣了解这方面的标准及其优点，可参阅WS - HT规范介绍  。\n     * 都使用了不同风格的 Oryx 流程编辑器对BPMN2建模。 jBPM5采用的是 Intalio 维护的开源项目分支。 Activiti5则使用了Signavio维护的分支。\n\n\n优劣对比：\n\n从技术组成来看，Activiti最大的优势是采用了PVM（流程虚拟机），支持除了BPMN2.0规范之外的流程格式，与外部服务有良好的集成能力，延续了jBPM3、jBPM4良好的社区支持，服务接口清晰，链式API更为优雅；劣势是持久化层没有遵循JPA规范。\n\njBPM最大的优势是采用了Apache Mina异步通信技术，采用JPA/JTA持久化方面的标准，以功能齐全的Guvnor作为流程仓库，有RedHat(jBoss.org被红帽收购)的专业化支持；但其劣势也很明显，对自身技术依赖过紧且目前仅支持BPMN2。\n\n## 三、activiti\n       *  咖啡兔博客： http://www.kafeitu.me/\n       *  activiti demo  http://demo.kafeitu.me:8080/kft-activiti-demo/login/\n\n## 四、jBPM的几个元素\n        * 流程设计器\n        * 自定义表单\n        * 流程自动化与数据统计\n   \n\n###  一些思考\n  *  引擎的两个极端：一飞冲天的动力之源？  为解决拥堵而变成新拥堵的制造者？\n   \n    | 飞机引擎        |         | \n   | --------   | -----       | ----       |\n   |  ![飞机引擎](http://img.blog.csdn.net/20151228065159929) | \n    | 西直门立交桥        |         |\n   | ![这里写图片描述](http://img.blog.csdn.net/20151228065548780)  |  \n\n","slug":"workflow","published":1,"date":"2018-03-17T13:52:44.189Z","updated":"2018-03-17T13:52:44.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjevjqakj0001ofjfp8ss2f9k","content":"<p>[TOC]</p>\n<h2 id=\"一、工作流相关概念\"><a href=\"#一、工作流相关概念\" class=\"headerlink\" title=\"一、工作流相关概念\"></a>一、工作流相关概念</h2><ul>\n<li><p>工作流(Workflow)</p>\n<ul>\n<li>是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则，在计算机中以恰当的模型表达并对其实施计算。工作流要解决的主要问题是：为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。（维基百科<a href=\"https://zh.wikipedia.org/wiki/工作流技术\" target=\"_blank\" rel=\"noopener\">工作流技术</a> ）</li>\n</ul>\n</li>\n<li><p>BPMN(Business Process Model and Notation)</p>\n<ul>\n<li>BPMN 是目前被各 BPM 厂商广泛接受的 BPM 标准，全称为 Business Process Model and Notation，由 OMG 组织进行维护，2011 年 1 月份发布了其 2.0 的正式版。BPMN 2.0 对比于第一个版本，其最重要的变化在于其定义了流程的元模型和执行语义，即它自己解决了存储、交换和执行的问题。这代表着 BPMN 2.0 流程定义模型不仅仅可以在任何兼容 BPMN 2.0 的引擎中执行，而且也可以在图形编辑器间交换。作为一个标准，BPMN 2.0 统一了工作流社区。</li>\n</ul>\n</li>\n<li><p>有穷状态机<br>  工作流流程定义图要求：必须是有一个起点和一个终点的有向图</p>\n</li>\n<li><p>XPDL（XML Process Definition Language）WFMC<br>WFMC工作流定义语言，流程模型文档规范。<br>(<img src=\"http://img.blog.csdn.net/20151228065630522\" alt=\"流程示例\">)</p>\n</li>\n</ul>\n<h2 id=\"二、工作流的特点？\"><a href=\"#二、工作流的特点？\" class=\"headerlink\" title=\"二、工作流的特点？\"></a>二、工作流的特点？</h2><h3 id=\"工作流参考模型\"><a href=\"#工作流参考模型\" class=\"headerlink\" title=\"工作流参考模型\"></a>工作流参考模型</h3><p><br>(<img src=\"http://img.blog.csdn.net/20151228065316082\" alt=\"流程架构\">)</p>\n<h2 id=\"三、jBPM技术体系\"><a href=\"#三、jBPM技术体系\" class=\"headerlink\" title=\"三、jBPM技术体系\"></a>三、jBPM技术体系</h2><pre><code>* jbpm VS activiti\n地址：\nhttp://www.activiti.org/download.html  activiti\n\n* jBPM是目前市场上主流开源工作引擎之一，在创建者Tom Baeyens离开JBoss后，jBPM的下一个版本jBPM5完全放弃了jBPM4的基础代码，基于Drools Flow重头来过，目前官网已经推出了jBPM6的beta版本；Tom Baeyens加入Alfresco后很快推出了新的基于jBPM4的开源工作流系统Activiti。\n\n* 都是BPMN2过程建模和执行环境。\n* 都是BPM系统（符合BPM规范）。\n* 都是开源项目-遵循ASL协议（ Apache的 软件许可）。\n* 都源自JBoss（Activiti5是jBPM4的衍生，jBPM5则基于Drools Flow）。\n* 都很成熟，从无到有，双方开始约始于2年半前。\n* 都有对人工任务的生命周期管理。 Activiti5和jBPM5唯一的区别是jBPM5基于WebService - HumanTask标准来描述人工任务和管理生命周期。 如有兴趣了解这方面的标准及其优点，可参阅WS - HT规范介绍  。\n* 都使用了不同风格的 Oryx 流程编辑器对BPMN2建模。 jBPM5采用的是 Intalio 维护的开源项目分支。 Activiti5则使用了Signavio维护的分支。\n</code></pre><p>优劣对比：</p>\n<p>从技术组成来看，Activiti最大的优势是采用了PVM（流程虚拟机），支持除了BPMN2.0规范之外的流程格式，与外部服务有良好的集成能力，延续了jBPM3、jBPM4良好的社区支持，服务接口清晰，链式API更为优雅；劣势是持久化层没有遵循JPA规范。</p>\n<p>jBPM最大的优势是采用了Apache Mina异步通信技术，采用JPA/JTA持久化方面的标准，以功能齐全的Guvnor作为流程仓库，有RedHat(jBoss.org被红帽收购)的专业化支持；但其劣势也很明显，对自身技术依赖过紧且目前仅支持BPMN2。</p>\n<h2 id=\"三、activiti\"><a href=\"#三、activiti\" class=\"headerlink\" title=\"三、activiti\"></a>三、activiti</h2><pre><code>*  咖啡兔博客： http://www.kafeitu.me/\n*  activiti demo  http://demo.kafeitu.me:8080/kft-activiti-demo/login/\n</code></pre><h2 id=\"四、jBPM的几个元素\"><a href=\"#四、jBPM的几个元素\" class=\"headerlink\" title=\"四、jBPM的几个元素\"></a>四、jBPM的几个元素</h2><pre><code>* 流程设计器\n* 自定义表单\n* 流程自动化与数据统计\n</code></pre><h3 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h3><ul>\n<li><p>引擎的两个极端：一飞冲天的动力之源？  为解决拥堵而变成新拥堵的制造者？</p>\n<p>| 飞机引擎        |         |<br>| ——–   | —–       | —-       |<br>|  <img src=\"http://img.blog.csdn.net/20151228065159929\" alt=\"飞机引擎\"> |<br>| 西直门立交桥        |         |<br>| <img src=\"http://img.blog.csdn.net/20151228065548780\" alt=\"这里写图片描述\">  |  </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"一、工作流相关概念\"><a href=\"#一、工作流相关概念\" class=\"headerlink\" title=\"一、工作流相关概念\"></a>一、工作流相关概念</h2><ul>\n<li><p>工作流(Workflow)</p>\n<ul>\n<li>是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如何前后组织在一起的逻辑和规则，在计算机中以恰当的模型表达并对其实施计算。工作流要解决的主要问题是：为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。（维基百科<a href=\"https://zh.wikipedia.org/wiki/工作流技术\" target=\"_blank\" rel=\"noopener\">工作流技术</a> ）</li>\n</ul>\n</li>\n<li><p>BPMN(Business Process Model and Notation)</p>\n<ul>\n<li>BPMN 是目前被各 BPM 厂商广泛接受的 BPM 标准，全称为 Business Process Model and Notation，由 OMG 组织进行维护，2011 年 1 月份发布了其 2.0 的正式版。BPMN 2.0 对比于第一个版本，其最重要的变化在于其定义了流程的元模型和执行语义，即它自己解决了存储、交换和执行的问题。这代表着 BPMN 2.0 流程定义模型不仅仅可以在任何兼容 BPMN 2.0 的引擎中执行，而且也可以在图形编辑器间交换。作为一个标准，BPMN 2.0 统一了工作流社区。</li>\n</ul>\n</li>\n<li><p>有穷状态机<br>  工作流流程定义图要求：必须是有一个起点和一个终点的有向图</p>\n</li>\n<li><p>XPDL（XML Process Definition Language）WFMC<br>WFMC工作流定义语言，流程模型文档规范。<br>(<img src=\"http://img.blog.csdn.net/20151228065630522\" alt=\"流程示例\">)</p>\n</li>\n</ul>\n<h2 id=\"二、工作流的特点？\"><a href=\"#二、工作流的特点？\" class=\"headerlink\" title=\"二、工作流的特点？\"></a>二、工作流的特点？</h2><h3 id=\"工作流参考模型\"><a href=\"#工作流参考模型\" class=\"headerlink\" title=\"工作流参考模型\"></a>工作流参考模型</h3><p><br>(<img src=\"http://img.blog.csdn.net/20151228065316082\" alt=\"流程架构\">)</p>\n<h2 id=\"三、jBPM技术体系\"><a href=\"#三、jBPM技术体系\" class=\"headerlink\" title=\"三、jBPM技术体系\"></a>三、jBPM技术体系</h2><pre><code>* jbpm VS activiti\n地址：\nhttp://www.activiti.org/download.html  activiti\n\n* jBPM是目前市场上主流开源工作引擎之一，在创建者Tom Baeyens离开JBoss后，jBPM的下一个版本jBPM5完全放弃了jBPM4的基础代码，基于Drools Flow重头来过，目前官网已经推出了jBPM6的beta版本；Tom Baeyens加入Alfresco后很快推出了新的基于jBPM4的开源工作流系统Activiti。\n\n* 都是BPMN2过程建模和执行环境。\n* 都是BPM系统（符合BPM规范）。\n* 都是开源项目-遵循ASL协议（ Apache的 软件许可）。\n* 都源自JBoss（Activiti5是jBPM4的衍生，jBPM5则基于Drools Flow）。\n* 都很成熟，从无到有，双方开始约始于2年半前。\n* 都有对人工任务的生命周期管理。 Activiti5和jBPM5唯一的区别是jBPM5基于WebService - HumanTask标准来描述人工任务和管理生命周期。 如有兴趣了解这方面的标准及其优点，可参阅WS - HT规范介绍  。\n* 都使用了不同风格的 Oryx 流程编辑器对BPMN2建模。 jBPM5采用的是 Intalio 维护的开源项目分支。 Activiti5则使用了Signavio维护的分支。\n</code></pre><p>优劣对比：</p>\n<p>从技术组成来看，Activiti最大的优势是采用了PVM（流程虚拟机），支持除了BPMN2.0规范之外的流程格式，与外部服务有良好的集成能力，延续了jBPM3、jBPM4良好的社区支持，服务接口清晰，链式API更为优雅；劣势是持久化层没有遵循JPA规范。</p>\n<p>jBPM最大的优势是采用了Apache Mina异步通信技术，采用JPA/JTA持久化方面的标准，以功能齐全的Guvnor作为流程仓库，有RedHat(jBoss.org被红帽收购)的专业化支持；但其劣势也很明显，对自身技术依赖过紧且目前仅支持BPMN2。</p>\n<h2 id=\"三、activiti\"><a href=\"#三、activiti\" class=\"headerlink\" title=\"三、activiti\"></a>三、activiti</h2><pre><code>*  咖啡兔博客： http://www.kafeitu.me/\n*  activiti demo  http://demo.kafeitu.me:8080/kft-activiti-demo/login/\n</code></pre><h2 id=\"四、jBPM的几个元素\"><a href=\"#四、jBPM的几个元素\" class=\"headerlink\" title=\"四、jBPM的几个元素\"></a>四、jBPM的几个元素</h2><pre><code>* 流程设计器\n* 自定义表单\n* 流程自动化与数据统计\n</code></pre><h3 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h3><ul>\n<li><p>引擎的两个极端：一飞冲天的动力之源？  为解决拥堵而变成新拥堵的制造者？</p>\n<p>| 飞机引擎        |         |<br>| ——–   | —–       | —-       |<br>|  <img src=\"http://img.blog.csdn.net/20151228065159929\" alt=\"飞机引擎\"> |<br>| 西直门立交桥        |         |<br>| <img src=\"http://img.blog.csdn.net/20151228065548780\" alt=\"这里写图片描述\">  |  </p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}